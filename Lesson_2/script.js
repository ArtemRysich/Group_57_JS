// –ú—É—Ç–∞–±–µ–ª—å–Ω—ñ —Ç–∞ —ñ–º—É—Ç–∞–±–µ–ª—å–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö
// https://developer.mozilla.org/en-US/docs/Glossary/Mutable
// const clients = ["Mango", "Poly", "Ajax"];
// const string = "script";
// console.log(string[0]);
// string[0]='a';
// console.log(string);
// console.log(clients[0])
// clients[0] = 'Kiwi';
// console.log(clients);

// Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º
// –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ genres –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ Jazz —ñ Blues.
// –î–æ–¥–∞–π—Ç–µ "Rock'n'roll" –≤ –∫—ñ–Ω–µ—Ü—å.
// –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ö–æ–¥ –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
// –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.

// const genres = ['Jazz', 'Blues'];
// push –¥–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É
// genres.push("Rock'n'roll");
// console.log(genres);
// console.log(genres[0]);
// console.log(genres.length);
// console.log(genres[genres.length - 1]);
// splice –≤—ñ–Ω –≤–∏–¥–∞–ª—è—î –µ–ª–µ–º–µ–Ω—Ç –∑ –º–∞—Å–∏–≤—É —Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ —Å–≤–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–µ —â–æ –≤–∏–¥–∞–ª–∏–≤
// const firstEl = genres.splice(0,1)
// console.log(genres);
// console.log(firstEl);
// genres.unshift('Country')
// console.log(genres);
// genres.splice(0,1,'Country','Reggae')
// console.log(genres);

// Example 2 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –∑–º—ñ–Ω–Ω—ñ–π –≤–µ–ª–∏—á–∏–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// const values = '8 11';
// const arr = values.split(' ')
// console.log(arr);
// const value1 = Number(arr[0]);
// const value2 = Number(arr[1]);
// // console.log(typeof value1, typeof value2);
// const sum = value1 * value2;
// console.log(`–ü–ª–æ—â–∞ ${sum}`);


// –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ —á–∞—Ç—É
// –†–æ–∑–∫–∞–∂—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ—à–µ –ø—Ä–æ "–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é" –ø–æ—á–µ–º—É –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è "b" —Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "a"  —Ç–æ –Ω–µ—Ç, –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ...

// let a = 10;
// console.log('a', a);
// let b = a;

// a = 25;
// console.log('a', a);
// console.log('b', b);


// const a = [1, 2, 3]
// const b = a;
// a.splice(1, 1)

// b.splice(0,1)
// console.log('a', a);
// console.log('b', b);

// –ß–∏ –≤–∏–∫–æ—Ä–∏—Ç–æ–≤—É—î—Ç—å—Å—è "let" –¥–ª—è  –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –º–∞—Å–∏–≤—É
// const a = [1, 2, 3];



// Example 3 - –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –ø–µ—Ä—à–æ–≥–æ.

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for(let i = 0; i < fruits.length; i+=1){
// console.log(`–ï–ª–µ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä ${i+1}: `,fruits[i]);
// }
// –ø–æ—á–µ–º—É –æ–±—ä—è–≤–ª—è—Ç—å –Ω–µ –Ω–∞–¥–æ –Ω–∞–º–±–µ—Ä?

// –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø—Ä–∏–∫–ª–∞–¥ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º 2 –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
// for(let i = 0, number = 1; i < fruits.length; i+=1, number+=1){
//     console.log(`–ï–ª–µ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä ${number}: `,fruits[i]);
//     }

// for(let i = 0 ; i < fruits.length; i+=1){
// let fruit = fruits[i]
// fruit =`üéâ`;
// console.log(fruit);
// console.log(fruit);
// fruits[i] = `üéÅ`
// }


// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];
// console.log(fruits);
// for(let fruit of fruits){
//     fruit = `üòÇ`;
//     console.log(fruit);
// }

// console.log(fruits);



// Example 4 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –∑–º—ñ–Ω–Ω–∏—Ö names —ñ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// const names = 'Jacob,William,Solomon,Kate';
// const phones = '89001234567,89001112233,890055566377,890055566300';
// const namesToArr = names.split(',');
// const phonesToArr = phones.split(',')
// // console.log(phonesToArr);
// for (let i = 0; i < namesToArr.length; i += 1){
//     console.log(`${namesToArr[i]} –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É ${phonesToArr[i]}`);
// }




// Example 5 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è –ø—Ä–æ–±—ñ–ª–æ–º. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.

// const string = 'Welcome to the future';
// const stringToArr = string.split(' ');
// console.log(stringToArr);
// stringToArr.splice(0, 1);
// stringToArr.splice(stringToArr.length - 1, 1)
// // stringToArr.splice(-1, 1)
// // stringToArr.splice(-1)
// const response =stringToArr.join(' ')
// console.log(response);

// –ü—Ä–∏–∫–ª–∞–¥ –∑ —á–∞—Ç—É
// const fruits = ['üçé', 'üçå', 'üçá', 'üçç'];
// for (let i = 0,amount = fruits.length; i < fruits.length; i += 1, amount -= 1) {
//     console.log(`–í –∫–æ—Ä–∑–∏–Ω—ñ ${amount} –æ–¥–∏–Ω–∏—Ü—ñ.`);
//     console.log(`–ú–∏ –¥—ñ—Å—Ç–∞–ª–∏ ${fruits[i]}.`);
// }

// Example 6 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≤–µ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const string = 'Welcome to the future';
// const stringToArr = string.split('');
// const StrReverse = stringToArr.reverse().join('')
// console.log(StrReverse);
// const StrReverse = string.split('').reverse().join('');
// console.log(StrReverse);

// Example 7 - –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.
// const numbers = [101, 78, 12, 76, 5, 11, 9];
// let minValue = numbers[0];

// for (const number of numbers) {
//     if (number < minValue) {
//         minValue = number;
//         // console.log(minValue);
//     }
//     // number < minValue ? minValue = number : minValue 
// }

// console.log(minValue);


// const a = 15;
// const b = 144;



// ------------------------------------------------PART 2 ---------------------------------------------------//

// –ü—Ä–∏–∫–ª–∞–¥–∏ –∑ –æ–±–ª–∞—Å—Ç—è–º–∏ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
// ------------------------------//
// let a = 10;

// if(true){
// let a = 5
// console.log('in local',a);
// }
// console.log('in global',a);

// ------------------------------//
// let a = 10;

// if(true){
//     a = 15;
// }
// console.log(a);

// ------------------------------//
// let a = 10;

// if(true){
//     let a = 20;
//     a = 15;
// }
// console.log(a);

// ------------------------------//
// let a = 10;

// if (true) {
//     a = 15;
//     // let a = 25;
//     console.log('local', a);
// }
// console.log('global', a);

// ------------------------------//
// let x = 15; // –ø—Ä–∏–º—ñ—Ç–∏–≤–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö
// let y = 10;

// function foo(a,y) {
//     let a = 15;
//     x = 99
//     console.log(x);
// }
// foo(x, y)
// console.log('x', x);

// let x = [1, 5]; //—Å–∫–ª–∞–¥–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö –∑–∞ –ø–∞—Å–∏–ª–∞–Ω–Ω—è–º
// let y = 10;

// function foo(a, y) {
//     a[0] = 99
// }
// foo(x, y)
// console.log('x', x);

// let x = [1, 5]; //—Å–∫–ª–∞–¥–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö –∑–∞ –ø–∞—Å–∏–ª–∞–Ω–Ω—è–º

// const a = x;
// x.splice(0,1)
// console.log(a);
// console.log(x);

// let a = 15;

// let b =a;

// a += 15

// console.log('a',a);
// console.log("b",b);




// const a = 20;
// console.log(a); // 20

// if (i === 2) {
//   const b = 30;
//   console.log(a); // 20
//   console.log(b); // 30
// }

// if (i === 3) {
//   console.log(a); // 20

//   // ‚ùå –û—à–∏–±–∫–∞! –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è b –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
//   console.log(b);
// }


// const a = 20;
// console.log(a); // 20

// if (i === 2) {
//   const b = 30;
//   console.log(a); // 20
//   console.log(b); // 30
//   if (i === 3) {
//     console.log(a); // 20
//     console.log(b); // 30
//   }
// }




// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–¥–∏ —Ñ—É–Ω–∫—Ü—ñ–π

// function expression
// –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
// const foo = function (a, b) {
//     return a + b
// }
// console.log(foo(3, 4));



// function declaretion

// function boo(a, b) {
//     return a + b
// }
// console.log(test(11,24));
// const test = boo;

// console.log(test(11,24));

// console.log(test);
// console.log(boo(5,6));
// console.log(boo(4,2));


/// arguments
//  –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—É–º—É –≤—Å—ñ—Ö —á–∏—Å–µ–ª

// function getSum (){
// // console.log(arguments);
// // const arr = Array.from(arguments)
// // console.log(arr);
// // let sum = arguments[0];
// // for(let i = 1; i < arguments.length; i+=1){
// //     sum*=arguments[i];
// // }
// let sum = 1;
// // console.log(sum);
// for(const argument of arguments ){
//     sum*=argument
//     // console.log(argument);
// }
// return sum
// }

// console.log(getSum(1, 2, 3, 4, 5, 6, 7, 8));
// console.log( getSum(44, 5, 14, 3));


// –°—Ç–µ–∫ –≤–∏–∫–ª–∏–∫—ñ–≤


// function foo(){
//     console.log('Hello');
//     boo()
//     console.log('qwerty');
// }

// function boo(){
//     console.log('world');
// }
// foo()
// function foo(){
//     console.log('foo before');
//     boo()
//     console.log('foo after');
// }


// function boo(){
//     foo()
//     console.log('boo');
// }

// foo()



// –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–∞—Å–∏–≤ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å

// function onlyNumbers(arr) {
//     const numbers = []
//     for (const item of arr) {
//         // if (typeof item === 'number' && !isNaN(item)) {
//         //     numbers.push(item)
//         // }

//         typeof item === 'number' && !isNaN(item) ? numbers.push(item) : null;
//     }
//     return numbers
// }

// // onlyNumbers([33, 15, false, NaN, -22])
// const result = onlyNumbers(['21', true, 12, [1, 2], 27, 19, null, 17])
// console.log(result);




// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ courses:
// 1 addCourse(name) - –¥–æ–¥–∞—î –∫—É—Ä—Å –≤ –∫—ñ–Ω–µ—Ü—å –∫–æ–ª–µ–∫—Ü—ñ—ó
// 2 removeCourse(name) - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
// 3 updateCourse(oldName, newName) - –∑–∞–º—ñ–Ω—é—î –Ω–∞–∑–≤—É –Ω–∞ –Ω–æ–≤—É
const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'Node', 'Express'];

// function addCourse(name) {
//     console.log(name);
//     if (courses.includes(name)) {
//         console.log('–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –¥–∞–Ω–Ω–∏–π –∫—É—Ä—Å');
//         return;
//     }
//     courses.push(name)
//     // console.log(courses);
//     return courses;
// }

// –û–ø–µ—Ä–∞—Ç–æ—Ä ~ https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT
// function removeCourse(name) {
//     const idx = courses.indexOf(name)

//     if (idx === -1) {
//         console.log('–ö—É—Ä—Å –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
//         return;
//     }
//     courses.splice(idx, 1)
//     console.log(courses);

// }

// function updateCourse (oldName, newName){
//     const inArr = courses.includes(oldName);
//     if(!inArr){
//         console.log('–ö—É—Ä—Å –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
//         return;
//     }
//     console.log(courses);
//     const idx = courses.indexOf(oldName);
//     courses.splice(idx,1,newName)
//     console.log(courses);


// }

// console.log();
// console.log();
// console.log();

// addCourse('Express');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
// addCourse('CSS'); // '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –¥–∞–Ω–Ω–∏–π –∫—É—Ä—Å'

// removeCourse('HTML');
// removeCourse('React');
// removeCourse('React');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
// removeCourse('Vue'); // '–ö—É—Ä—Å –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'

// updateCourse('Express', 'NextJS');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NextJS']
// updateCourse('Angular', 'NestJS'); //'–ö—É—Ä—Å –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'