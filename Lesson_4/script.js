// function add(a,b){
//     return a+b
// }

// function foo(arr, qwe){
// console.log(qwe);
// const result = qwe(arr[0],arr[1])
// console.log(result);
// }

// foo([1,2],add)


// function declaration
// function add(a, b) {
//     return a + b
// }

// // arrow function –∑ —è–≤–Ω–∏–º –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º
// const add = (a, b) => {
//     return a + b
// }
// // // arrow function –∑ –ù–ï —è–≤–Ω–∏–º –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º
// const add = (a, b) => a + b






















// Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å —Ç–∞–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ ID, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —è–∫ id —ñ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// logProduct(product) - –∫–æ–ª–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—î –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

function createProduct(partialProduct, callback) {
    const obj = {
        id: Date.now(),
        ...partialProduct
    }
    console.log('callback', callback);
}

function logProduct(product) {
    console.log(product);
}
console.log('logProduct', logProduct);
createProduct({
    name: 'üçé',
    price: 30,
    quantity: 3
}, logProduct);


console.log('logTotalPrice', logTotalPrice);
createProduct({
    name: 'üçã',
    price: 20,
    quantity: 5
}, logTotalPrice);



function logTotalPrice({
    price,
    quantity
}) {
    console.log(price * quantity);
}


















// Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç—É account  –º–µ—Ç–æ–¥–∏ –∑–∑–∞–ø–∏—Å–æ–º
// withdraw(amount, onSuccess, onError) —Ç–∞ deposit(amount, onSuccess, onError) –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —ñ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–±–µ–∫–∏.
// –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ this.balance —Ç–∞ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
// –ú–µ—Ç–æ–¥ deposit  –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMI –∞–±–æ –º–µ–Ω—å—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —Ç–∞ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// const TRANSACTION_LIMIT = 1000;

// const account = {
//     username: 'Jacob',
//     balance: 1400,
//     withdraw(amount, onSuccess, onError) {
//         if (amount > this.balance) {
//             onError('–ù–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤')
//         } else if (amount > TRANSACTION_LIMIT) {
//             onError('–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç')
//         } else {
//             this.balance -= amount;
//             onSuccess('–£—Å–ø—ñ—à–Ω–æ')
//         }
//     },
//     deposit(amount, onSuccess, onError) {
//         if (amount > TRANSACTION_LIMIT) {
//             onError('–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç')
//         } else if (amount <= 0) {
//             onError(`–ù–µ –º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ ${amount}!`)
//         } else {
//             this.balance += amount
//             onSuccess(this.balance)
//         }
//     }
// };
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

// function handleSuccess(message) {
//     console.log(`‚úÖ Success! ${message}`);
// }

// function handleError(message) {
//     console.log(`‚ùå Error! ${message}`);
// }
// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(1100, handleSuccess, handleError);
// // account.withdraw(300, handleSuccess, handleError);

// account.deposit(600, handleSuccess, handleError);






// Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–±–±–µ–∫–∞.

// function each(array, callback) {
//     const newArr = [];
//     for(const number of array){
//        const result = callback(number)
//        newArr.push(result)
//     }
//     return newArr
// }

// console.log(
//     each([64, 49, 36, 25, 16], function (value) {
//         return value * 2;
//     }),
// );
// console.log(
//     each([64, 49, 36, 25, 16], function (value) {
//         return value - 10;
//     }),
// );
// console.log(
//     each([64, 49, 36, 25, 16], function (value) {
//         return Math.sqrt(value);
//     }),
// );
// console.log(
//     each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//         return Math.ceil(value);
//     }),
// );
// console.log(
//     each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//         return Math.floor(value);
//     }),
// );


// Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
// const createProduct = (partialProduct, callback) => {
//     const obj = {
//         id: Date.now(),
//         ...partialProduct
//     }
//     callback(obj)
// }

// const logProduct = product => console.log(product)
// const result = logProduct('PRODUCT!!!!')
// console.log(result);

// const logTotalPrice = product =>  {return product.price * product.quantity};
// const result = logTotalPrice({
//     price: 2000,
//     quantity: 3
// })
// console.log(result);

// createProduct({
//     name: 'üçé',
//     price: 30,
//     quantity: 3
// }, logProduct);
// createProduct({
//     name: 'üçã',
//     price: 20,
//     quantity: 5
// }, logTotalPrice);








// Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.


// const each = (...args) => {
//     console.log(args);
// const newArr = [];
// for (const el of array) {
//     newArr.push(callback(el));
// }
// return newArr;
// }
// each(1,2,3,4,5,6)
// each(1,2,3,4,5,6,343,3)
// console.log( each([64, 49, 36, 25, 16], value => value * 2));
// console.log(each([64, 49, 36, 25, 16],  (value) => value - 10));
// console.log(
//     each([64, 49, 36, 25, 16], (value) => Math.sqrt(value)));

// console.log(
//     each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//         return Math.ceil(value);
//     }),
// );
// console.log(
//     each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//         return Math.floor(value);
//     }),
// );





// Example 6 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// const logItems = items => items.forEach(item => console.log(item))
const items = ['Mango', 'Poly', 'Ajax']
for(const el of items){

}


     items.forEach(function (item, idx, arr) {
    console.log(item, idx,arr); arr[idx]
})

// function forEach2(arr, callback) {
//     for (let i = 0; i < arr.length; i += 1) {
//         callback(arr[i], i, arr)
//     }
// }

// forEach2(['Mango', 'Poly', 'Ajax'], function (item, idx, arr) {
//     console.log(item, idx,arr);
// })




// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);








// Example 7 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
// const printContactsInfo = ({names,phones}) => {
//     const nameList = names.split(',');
//     console.log(nameList);
//     const phoneList = phones.split(',');
//     console.log(phoneList);
// nameList.forEach((name, qwerty,arr)=>{})
//         console.log(qwerty);
//  console.log(       arr[qwerty], phoneList[qwerty]);

// console.log(name, phoneList[idx]);
//     })
// }

// printContactsInfo({
//     names: 'Jacob,William,Solomon,Artemis',
//     phones: '89001234567,89001112233,890055566377,890055566300',
// });


// const arr =[1,23,5,6,32]
// arr.forEach(item =>  item * 1000)
// console.log(result);

// Example 8 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
// (function(a,b){
// console.log(a+b);
// })(3,4)
// const cal—ÅulateAverage = (arr) => {

//     let total = 0;
//     for (const item of arr) {

//     }
arr.forEach(function (item, idx, newArr) {
    newArr[idx] = 2
});

//     // return total / args.length;
// }
// const arr = [1, 2, 3, 4]
// console.log(cal—ÅulateAverage(arr)); // 2.5
// console.log(arr);
// console.log(cal—ÅulateAverage(14, 8, 2)); // 8
// console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2


// function outside() {
//     const x = 5;
//     function inside() {
//         console.log(x);
//         return x * 2;
//     }
//     return inside;
//   }
// console.log(outside()());